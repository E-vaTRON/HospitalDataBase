// <auto-generated />
using System;
using HospitalDataBase.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalDataBase.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220422081927_NewRelationship")]
    partial class NewRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.UserIdentifile.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.UserIdentifile.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateJoin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Core.Entities.UserIdentifile.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.AnalysationTest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("DSymptom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceID")
                        .HasColumnType("int");

                    b.Property<string>("DoctorComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("ExamID");

                    b.ToTable("AnalysationTests");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Bill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DrugID")
                        .HasColumnType("int");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DrugID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("TransactionID");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.DeviceService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthInsurancePrice")
                        .HasColumnType("int");

                    b.Property<string>("ManagementID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<int>("ResultFromType")
                        .HasColumnType("int");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServicePrice")
                        .HasColumnType("int");

                    b.Property<string>("SmallID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("DeviceServices");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Drug", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ActiveIngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthInsurancePrice")
                        .HasColumnType("int");

                    b.Property<string>("ManagementID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.GoodsImportation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Amout")
                        .HasColumnType("int");

                    b.Property<string>("Billnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiptDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("StorageID")
                        .HasColumnType("int");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("GetGoodsImportations");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.HistoryMedicalExam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("DateReExam")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTakeExam")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("PatientID");

                    b.ToTable("HistoryMedicalExams");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CurrentAmount")
                        .HasColumnType("int");

                    b.Property<int>("DrugID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrinaryAmount")
                        .HasColumnType("int");

                    b.Property<int>("StorageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DrugID");

                    b.HasIndex("StorageID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CardID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PnoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.PatientTransactionHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExamID")
                        .IsUnique();

                    b.ToTable("TransactionHistorys");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Storage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Suppling", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DrugID")
                        .HasColumnType("int");

                    b.Property<string>("GooodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DrugID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("ShipmentID");

                    b.ToTable("Supplings");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Doctor", b =>
                {
                    b.HasBaseType("Core.Entities.UserIdentifile.User");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Employee", b =>
                {
                    b.HasBaseType("Core.Entities.UserIdentifile.User");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit")
                        .HasColumnName("Employee_Verified");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Core.Entities.UserIdentifile.UserRole", b =>
                {
                    b.HasOne("Core.Entities.UserIdentifile.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserIdentifile.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.AnalysationTest", b =>
                {
                    b.HasOne("HospitalDataBase.Core.Entities.DeviceService", "DeviceService")
                        .WithMany("AnalysationTests")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalDataBase.Core.Entities.HistoryMedicalExam", "HistoryMedicalExam")
                        .WithMany("AnalysationTests")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceService");

                    b.Navigation("HistoryMedicalExam");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Bill", b =>
                {
                    b.HasOne("HospitalDataBase.Core.Entities.Drug", "Drug")
                        .WithMany("Bills")
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalDataBase.Core.Entities.Inventory", "Inventory")
                        .WithMany("Bills")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalDataBase.Core.Entities.PatientTransactionHistory", "Transaction")
                        .WithMany("Bills")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Inventory");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.HistoryMedicalExam", b =>
                {
                    b.HasOne("HospitalDataBase.Core.Entities.Doctor", "Doctor")
                        .WithMany("Exams")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalDataBase.Core.Entities.Employee", "Employee")
                        .WithMany("Exams")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalDataBase.Core.Entities.Patient", "Patient")
                        .WithMany("Exams")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Employee");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Inventory", b =>
                {
                    b.HasOne("HospitalDataBase.Core.Entities.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalDataBase.Core.Entities.Storage", "Storage")
                        .WithMany("Inventories")
                        .HasForeignKey("StorageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.PatientTransactionHistory", b =>
                {
                    b.HasOne("HospitalDataBase.Core.Entities.HistoryMedicalExam", "Exam")
                        .WithOne("Transaction")
                        .HasForeignKey("HospitalDataBase.Core.Entities.PatientTransactionHistory", "ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Suppling", b =>
                {
                    b.HasOne("HospitalDataBase.Core.Entities.Drug", "Drug")
                        .WithMany("Supplings")
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalDataBase.Core.Entities.Inventory", "Inventory")
                        .WithMany("Supplings")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalDataBase.Core.Entities.GoodsImportation", "GoodsImportation")
                        .WithMany("Goods")
                        .HasForeignKey("ShipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("GoodsImportation");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Core.Entities.UserIdentifile.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.UserIdentifile.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.DeviceService", b =>
                {
                    b.Navigation("AnalysationTests");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Drug", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Supplings");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.GoodsImportation", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.HistoryMedicalExam", b =>
                {
                    b.Navigation("AnalysationTests");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Inventory", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Supplings");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Patient", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.PatientTransactionHistory", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Storage", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Doctor", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("HospitalDataBase.Core.Entities.Employee", b =>
                {
                    b.Navigation("Exams");
                });
#pragma warning restore 612, 618
        }
    }
}
